{"version":3,"sources":["UserTodos/ModelWindow.js","ReduxStore/Actions.js","ReduxStore/UserTodoReducer.js","ReduxStore/ConstantNames.js","ReduxStore/RootReducer.js","ReduxStore/Store.js","UserTodos/TodoDashboard.js","UserTodos/UserDashboard.js","UserTodos/UserTodos.js","UserTodos/PageNotFound.js","App.js","serviceWorker.js","index.js"],"names":["ModelWindow","Title","dateDisplay","handleOk","handleCancel","OnchangeTodo","props","OnchangeTodoDate","OnchangeUser","ReduxState","useSelector","state","UserTodo","InsertTodo","TodoDate","moment","TabCheck","title","visible","onSave","onCancel","footer","Button","key","style","backgroundColor","color","onClick","type","loading","Loading","Fragment","CircularProgress","size","padding","placeholder","name","ActionError","Error","border","value","TodoAction","onChange","DateError","nameError","InsertUser","UserName","EmailError","UserEmail","AddTodoDetails","Todo","dispatch","AddUserDetails","UserList","AddUsers","initialState","DateBox","TodoList","UserID","Flag","TodoReducer","action","encryptor","createEncryptor","secretKey","onError","error","persistConfig","storage","whiteList","transforms","RootReducer","combineReducers","UserTodoReducer","persistReducer","store","createStore","applyMiddleware","thunk","logger","Redux","window","__REDUX_DEVTOOLS_EXTENSION__","Persistor","persistStore","TodoDashboard","onEdit","e","a","filter","DateAdded","Action","Cancel","Confirm","AddTodo","columns","dataIndex","render","text","record","href","onConfirm","okText","cancelText","data","JSON","parse","stringify","this","DataSource","i","length","push","split","pagination","pageSize","dataSource","Component","connect","payload","ActionCreator","UserDashboard","User","EmailID","AddUser","TabPane","Tabs","Todos","showModal","currentTarget","id","ClearField","setState","target","UpdateTodo","UniqueID","Date","getTime","toString","HideVisible","test","UpdateUser","className","defaultActiveKey","tab","styles","borderRadius","setTimeout","PageNotFound","App","exact","path","Boolean","location","hostname","match","app","persistor","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.72636872.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Modal, Input, DatePicker } from 'antd';\r\nimport { Label } from '@mobiscroll/react-lite';\r\nimport { useSelector } from \"react-redux\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport moment from 'moment';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Button from '@material-ui/core/Button';\r\nexport const ModelWindow = ({ handleOk, handleCancel, props, OnchangeTodo, OnchangeTodoDate, OnchangeUser }) => {\r\n    debugger;\r\n    const ReduxState = useSelector(state => state);\r\n    let Title;\r\n    var dateDisplay;\r\n\r\n    if (ReduxState.UserTodo.InsertTodo.TodoDate == null || ReduxState.UserTodo.InsertTodo.TodoDate == \"\") {\r\n        dateDisplay = \"\";\r\n    }\r\n    else {\r\n        dateDisplay = moment(ReduxState.UserTodo.InsertTodo.TodoDate);\r\n    }\r\n\r\n    // if (dateDisplay == null || dateDisplay == \"\") {\r\n    //     dateDisplay = \"\";\r\n    // }\r\n    // else {\r\n    //     dateDisplay = dateDisplay.split(\"T\")[0];\r\n    //     dateDisplay = moment(dateDisplay);\r\n    // }\r\n\r\n    if (ReduxState.UserTodo.TabCheck === \"Todo\") {\r\n        Title = \"Add New Todo\";\r\n    }\r\n    else {\r\n        Title = \"Add New User\";\r\n    }\r\n    return (\r\n        <Modal\r\n            title={Title}\r\n            visible={ReduxState.UserTodo.visible}\r\n            onSave={handleOk}\r\n            onCancel={handleCancel}\r\n            footer={[\r\n                <Button key=\"Cancel\" style={{ backgroundColor: \"#40a9ff\", color: \"white\" }} onClick={handleCancel}>\r\n                    Cancel\r\n            </Button>,\r\n                <Button key=\"Save\" type=\"primary\" style={{ backgroundColor: \"#40a9ff\", color: \"white\" }} loading={ReduxState.UserTodo.loading} onClick={handleOk}>\r\n                    {ReduxState.UserTodo.Loading === false ? \"Save\" : (<React.Fragment><CircularProgress size={20} /><span>Inserting</span></React.Fragment>)}\r\n                </Button>\r\n                ,\r\n            ]}\r\n        >\r\n            {ReduxState.UserTodo.TabCheck === \"Todo\" ?\r\n                (<React.Fragment> <div style={{ padding: \"10px\" }}>\r\n                    <Label>Action</Label>\r\n                    <Input placeholder=\"Action\" name=\"TodoAction\" style={ReduxState.UserTodo.ActionError === true && ReduxState.UserTodo.Error === true ? { border: \"1px solid #ef1a04\" } : { border: \"1px solid #d9d9d9\" }} value={ReduxState.UserTodo.InsertTodo.TodoAction} onChange={OnchangeTodo} />\r\n                </div>\r\n                    <div style={{ padding: \"10px\" }}>\r\n                        <Label>Date Added</Label>\r\n                        <br />\r\n                        <DatePicker name=\"TodoDate\" value={dateDisplay} style={ReduxState.UserTodo.DateError === true && ReduxState.UserTodo.Error === true ? { border: \"1px solid #ef1a04\" } : { border: \"1px solid #d9d9d9\" }} onChange={OnchangeTodoDate} />\r\n                    </div></React.Fragment>) :\r\n                (<React.Fragment> <div style={{ padding: \"10px\" }}>\r\n                    <Label>Name</Label>\r\n                    <Input placeholder=\"Name\" name=\"UserName\" style={ReduxState.UserTodo.nameError === true && ReduxState.UserTodo.Error === true ? { border: \"1px solid #ef1a04\" } : { border: \"1px solid #d9d9d9\" }} value={ReduxState.UserTodo.InsertUser.UserName} onChange={OnchangeUser} />\r\n                </div>\r\n                    <div style={{ padding: \"10px\" }}>\r\n                        <Label>Email</Label>\r\n                        <br />\r\n                        <Input placeholder=\"Email\" name=\"UserEmail\" style={ReduxState.UserTodo.EmailError === true && ReduxState.UserTodo.Error === true ? { border: \"1px solid #ef1a04\" } : { border: \"1px solid #d9d9d9\" }} value={ReduxState.UserTodo.InsertUser.UserEmail} onChange={OnchangeUser} />\r\n                    </div></React.Fragment>)\r\n            }\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ModelWindow;\r\n","function AddTodos(TodoList) {\r\n    return {\r\n        type: 'TodoList', value: TodoList\r\n    };\r\n}\r\n\r\nfunction AddUsers(UserList) {\r\n    return {\r\n        type: 'UserList', value: UserList\r\n    };\r\n}\r\nexport const AddTodoDetails = (Todo) => {\r\n    debugger;\r\n    return function (dispatch) {\r\n        dispatch(AddTodos(Todo))\r\n        // setTimeout(() => {\r\n        //     dispatch(AddTodos(Todo))\r\n        // }, 3000)\r\n    };\r\n}\r\nexport const AddUserDetails = (UserList) => {\r\n    debugger;\r\n    return function (dispatch) {\r\n        dispatch(AddUsers(UserList))\r\n        // setTimeout(() => {\r\n        //     dispatch(AddUsers(UserList))\r\n        // }, 3000)\r\n    };\r\n}\r\nexport const HideVisibleAction = (HideVisible) => {\r\n    debugger;\r\n    return function (dispatch) {\r\n        setTimeout(() => {\r\n            dispatch(HideVisible)\r\n        }, 3000)\r\n    };\r\n}\r\nfunction ClearField() {\r\n    return {\r\n        type: 'CLEAR_FIELD'\r\n    };\r\n}\r\nexport const ClearFieldStore = () => {\r\n    debugger;\r\n    return function (dispatch) {\r\n        dispatch(ClearField())\r\n    };\r\n}","import * as actionTypes from './ConstantNames';\r\n\r\nconst initialState = {\r\n    Loading: false,\r\n    TabCheck: \"Todo\",\r\n    DateBox: \"\",\r\n    InsertTodo: {\r\n        TodoDate: \"\",\r\n        TodoAction: \"\"\r\n    },\r\n    InsertUser: {\r\n        UserName: \"\",\r\n        UserEmail: \"\"\r\n    },\r\n    TodoList: [],\r\n    UserList: [],\r\n    visible: false,\r\n    UserID: \"\",\r\n    Flag: \"I\",\r\n    ActionError: false,\r\n    DateError: false,\r\n    nameError: false,\r\n    EmailError: false,\r\n    Error: false,\r\n};\r\n\r\nconst TodoReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"RESET_TODOUSER\":\r\n            return initialState;\r\n        case actionTypes.USERID:\r\n            return {\r\n                ...state, UserID: action.value\r\n            };\r\n        case actionTypes.FLAG:\r\n            return {\r\n                ...state, Flag: action.value\r\n            };\r\n        case actionTypes.LOADING:\r\n            return {\r\n                ...state, Loading: action.value\r\n            };\r\n        case actionTypes.VISIBLE:\r\n            return {\r\n                ...state, visible: action.value\r\n            };\r\n        case actionTypes.TABCHECK:\r\n            return {\r\n                ...state, TabCheck: action.value\r\n            };\r\n        case actionTypes.DATEBOX:\r\n            return {\r\n                ...state, DateBox: action.value\r\n            };\r\n        case actionTypes.INSERTTODO:\r\n            return {\r\n                ...state, InsertTodo: action.value\r\n            };\r\n        case actionTypes.INSERTUSER:\r\n            return {\r\n                ...state, InsertUser: action.value\r\n            };\r\n        case actionTypes.TODOLIST:\r\n            return {\r\n                ...state, TodoList: action.value\r\n            };\r\n        case actionTypes.USERLIST:\r\n            return {\r\n                ...state, UserList: action.value\r\n            };\r\n\r\n        case actionTypes.ACTIONERROR:\r\n            return {\r\n                ...state, ActionError: action.value\r\n            };\r\n        case actionTypes.DATEERROR:\r\n            return {\r\n                ...state, DateError: action.value\r\n            };\r\n        case actionTypes.NAMEERROR:\r\n            return {\r\n                ...state, nameError: action.value\r\n            };\r\n        case actionTypes.EMAILERROR:\r\n            return {\r\n                ...state, EmailError: action.value\r\n            };\r\n        case actionTypes.ERROR:\r\n            return {\r\n                ...state, Error: action.value\r\n            };\r\n        case \"CLEAR_FIELD\":\r\n            return {\r\n                ...state,\r\n                Loading: false,\r\n                TabCheck: \"Todo\",\r\n                InsertTodo: {\r\n                    TodoDate: \"\",\r\n                    TodoAction: \"\"\r\n                },\r\n                InsertUser: {\r\n                    UserName: \"\",\r\n                    UserEmail: \"\"\r\n                },\r\n                visible: false,\r\n                UserID: \"\",\r\n                Flag: \"I\",\r\n                DateBox: \"\",\r\n                ActionError: false,\r\n                DateError: false,\r\n                nameError: false,\r\n                EmailError: false,\r\n                Error: false,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default TodoReducer;","export const LOADING = 'Loading';\r\nexport const TABCHECK = 'TabCheck';\r\nexport const DATEBOX = 'DateBox';\r\nexport const INSERTTODO = 'InsertTodo';\r\nexport const INSERTUSER = 'InsertUser';\r\nexport const TODOLIST = 'TodoList';\r\nexport const USERLIST = 'UserList';\r\nexport const VISIBLE = 'visible';\r\nexport const USERID = 'UserID';\r\nexport const FLAG = 'Flag';\r\nexport const ACTIONERROR = 'ActionError';\r\nexport const DATEERROR = 'DateError';\r\nexport const NAMEERROR = 'nameError';\r\nexport const EMAILERROR = 'EmailError';\r\nexport const ERROR = 'Error';\r\n","import { combineReducers } from 'redux';\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { persistReducer } from \"redux-persist\";\r\nimport UserTodoReducer from './UserTodoReducer';\r\nimport createEncryptor from \"redux-persist-transform-encrypt\"\r\n\r\nconst encryptor = createEncryptor({\r\n    secretKey: \"my-super-secret-key\",\r\n    onError: function (error) {\r\n        // Handle the error.\r\n    }\r\n})\r\nconst persistConfig = {\r\n    key: \"FrontEndroot\",\r\n    storage,\r\n    whiteList: ['UserTodoReducer'],\r\n    transforms: [encryptor],\r\n}\r\n\r\n\r\nconst RootReducer = combineReducers({\r\n    UserTodo: UserTodoReducer\r\n});\r\n\r\nexport default persistReducer(persistConfig, RootReducer);","import { createStore, applyMiddleware } from 'redux';\r\nimport { persistStore } from 'redux-persist';\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\nimport Redux from \"redux-thunk\"\r\nimport RootReducer from './RootReducer';\r\n\r\n//  const middleware = [logger];\r\n//  export const store = createStore(RootReducer, applyMiddleware(...middleware));\r\nexport const store = createStore(RootReducer, applyMiddleware(thunk, logger, Redux),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n// export const store = createStore(RootReducer);\r\nexport const Persistor = persistStore(store)\r\nexport default { store, Persistor };","import React, { Component } from 'react';\r\nimport { Table, Space, Popconfirm, message } from 'antd';\r\nimport { connect } from 'react-redux';\r\nimport * as ActionCreator from '../ReduxStore/Actions';\r\nimport { store } from '../ReduxStore/Store';\r\n\r\nclass TodoDashboard extends Component {\r\n    onEdit = async (key, e) => {\r\n        debugger;\r\n        await store.dispatch({ type: \"Loading\", value: false })\r\n        debugger;\r\n        let TodoList = this.props.UserTodo.TodoList;\r\n        TodoList = TodoList.filter(Todo => Todo.key == key)\r\n        let InsertTodo = this.props.UserTodo.InsertTodo;\r\n        InsertTodo[\"TodoDate\"] = TodoList[0].DateAdded;\r\n        InsertTodo[\"TodoAction\"] = TodoList[0].Action;\r\n        store.dispatch({ type: \"UserID\", value: TodoList[0].key })\r\n        store.dispatch({ type: \"InsertTodo\", value: InsertTodo })\r\n        store.dispatch({ type: \"visible\", value: true })\r\n        await store.dispatch({ type: \"Flag\", value: \"U\" })\r\n    }\r\n    Cancel = (key, e) => {\r\n        debugger;\r\n        return false;\r\n    }\r\n    Confirm = (key, e) => {\r\n        debugger;\r\n        let TodoList = this.props.UserTodo.TodoList;\r\n        TodoList = TodoList.filter(Todo => Todo.key != key)\r\n        this.props.AddTodo(TodoList);\r\n    }\r\n    render() {\r\n        debugger;\r\n        const columns = [\r\n\r\n            {\r\n                title: 'Action',\r\n                dataIndex: 'Action',\r\n                key: 'Action',\r\n            },\r\n            {\r\n                title: 'DateAdded',\r\n                dataIndex: 'DateAdded',\r\n                key: 'DateAdded',\r\n            },\r\n            {\r\n                title: 'Operation',\r\n                key: 'Operation',\r\n                render: (text, record) => (\r\n                    <Space size=\"middle\">\r\n                        <a href=\" #\" onClick={(e) => { this.onEdit(record.key, e); }}>Edit</a>\r\n                        <Popconfirm\r\n                            title=\"Are you sure, Do you want delete this Todo?\"\r\n                            onConfirm={(e) => { this.Confirm(record.key, e); }}\r\n                            onCancel={(e) => { this.Cancel(record.key, e); }}\r\n                            okText=\"Yes\"\r\n                            cancelText=\"No\"\r\n                        ><a href=\" #\">Delete</a></Popconfirm>\r\n\r\n                    </Space>\r\n                ),\r\n            },\r\n        ];\r\n        debugger;\r\n        let data = JSON.parse(JSON.stringify(this.props.UserTodo.TodoList));\r\n        let DataSource = [];\r\n        for (let i = 0; i < data.length; i++) {\r\n            DataSource.push(data[i])\r\n            DataSource[i].DateAdded = DataSource[i].DateAdded.split(\"T\")[0];\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Table columns={columns} pagination={{ pageSize: 5 }} dataSource={DataSource} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStatetoProps = state => {\r\n    debugger;\r\n    return {\r\n        UserTodo: state.UserTodo\r\n    };\r\n}\r\nconst mapDispatchtoProps = dispatch => {\r\n    return {\r\n        AddTodo: (payload) => dispatch(ActionCreator.AddTodoDetails(payload)),\r\n    };\r\n}\r\nexport default connect(mapStatetoProps, mapDispatchtoProps)(TodoDashboard);\r\n\r\n","import React, { Component } from 'react';\r\nimport { Table, Space, Popconfirm, message } from 'antd';\r\nimport { connect } from 'react-redux';\r\nimport * as ActionCreator from '../ReduxStore/Actions';\r\nimport { store } from '../ReduxStore/Store';\r\nclass UserDashboard extends Component {\r\n\r\n    onEdit = async (key, e) => {\r\n        debugger;\r\n        await store.dispatch({ type: \"Loading\", value: false })\r\n        debugger;\r\n        let UserList = this.props.UserTodo.UserList;\r\n        UserList = UserList.filter(User => User.key == key)\r\n\r\n        let InsertUser = this.props.UserTodo.InsertUser;\r\n        InsertUser[\"UserName\"] = UserList[0].name;\r\n        InsertUser[\"UserEmail\"] = UserList[0].EmailID;\r\n        store.dispatch({ type: \"UserID\", value: UserList[0].key })\r\n        store.dispatch({ type: \"InsertUser\", value: InsertUser })\r\n        store.dispatch({ type: \"visible\", value: true })\r\n        await store.dispatch({ type: \"Flag\", value: \"U\" })\r\n    }\r\n    Cancel = (key, e) => {\r\n        debugger;\r\n        return false;\r\n    }\r\n    Confirm = (key, e) => {\r\n        debugger;\r\n        let UserList = this.props.UserTodo.UserList;\r\n        UserList = UserList.filter(User => User.key != key)\r\n        this.props.AddUser(UserList);\r\n    }\r\n    render() {\r\n        debugger;\r\n        const columns = [\r\n            {\r\n                title: 'Name',\r\n                dataIndex: 'name',\r\n                key: 'name',\r\n            },\r\n            {\r\n                title: 'Action',\r\n                key: 'action',\r\n                render: (text, record) => (\r\n                    <Space size=\"middle\">\r\n                        <a href=\" #\" onClick={(e) => { this.onEdit(record.key, e); }}>Edit</a>\r\n                        <Popconfirm\r\n                            title=\"Are you sure, Do you want delete this User?\"\r\n                            onConfirm={(e) => { this.Confirm(record.key, e); }}\r\n                            onCancel={(e) => { this.Cancel(record.key, e); }}\r\n                            okText=\"Yes\"\r\n                            cancelText=\"No\"\r\n                        ><a href=\" #\">Delete</a></Popconfirm>\r\n\r\n                    </Space>\r\n                ),\r\n            },\r\n        ];\r\n        let data = JSON.parse(JSON.stringify(this.props.UserTodo.UserList));\r\n        return (\r\n            <div>\r\n                <Table columns={columns} pagination={{ pageSize: 5 }} dataSource={data} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStatetoProps = state => {\r\n\r\n    return {\r\n        UserTodo: state.UserTodo\r\n    };\r\n}\r\nconst mapDispatchtoProps = dispatch => {\r\n    return {\r\n        AddUser: (payload) => dispatch(ActionCreator.AddUserDetails(payload)),\r\n    };\r\n}\r\nexport default connect(mapStatetoProps, mapDispatchtoProps)(UserDashboard);","import React, { Component } from 'react';\r\nimport { Tabs } from 'antd';\r\nimport { Button } from 'antd';\r\nimport ModelWindow from \"./ModelWindow\";\r\nimport TodoDashboard from \"./TodoDashboard\";\r\nimport UserDashboard from \"./UserDashboard\";\r\nimport { connect } from 'react-redux';\r\nimport { store } from '../ReduxStore/Store';\r\nimport * as ActionCreator from '../ReduxStore/Actions';\r\nconst { TabPane } = Tabs;\r\nclass Todos extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            Loading: false\r\n        };\r\n    }\r\n    async componentDidMount() {\r\n        this.props.ClearField();\r\n        await store.dispatch({ type: \"RESET_TODOUSER\" })\r\n    }\r\n    showModal = (e) => {\r\n        debugger;\r\n        let TabCheck = e.currentTarget.id;\r\n        this.props.ClearField();\r\n        if (TabCheck === \"User\") {\r\n            this.setState({\r\n                visible: true,\r\n            });\r\n            store.dispatch({ type: \"TabCheck\", value: \"User\" })\r\n        }\r\n        else {\r\n            store.dispatch({ type: \"TabCheck\", value: \"Todo\" })\r\n        }\r\n        store.dispatch({ type: \"visible\", value: true })\r\n        store.dispatch({ type: \"Loading\", value: false })\r\n        store.dispatch({ type: \"Flag\", value: \"I\" })\r\n\r\n    };\r\n    handleCancel = e => {\r\n        debugger;\r\n        store.dispatch({ type: \"visible\", value: false })\r\n    };\r\n    OnchangeTodo = e => {\r\n        debugger;\r\n        store.dispatch({ type: \"ActionError\", value: false })\r\n        let InsertTodo = this.props.UserTodo.InsertTodo;\r\n        InsertTodo[e.target.name] = e.target.value;\r\n        store.dispatch({ type: \"InsertTodo\", value: InsertTodo })\r\n    }\r\n    OnchangeTodoDate = e => {\r\n        debugger;\r\n        store.dispatch({ type: \"DateError\", value: false })\r\n        let InsertTodo = this.props.UserTodo.InsertTodo;\r\n        if (e != null) {\r\n            InsertTodo[\"TodoDate\"] = e;\r\n        }\r\n        else {\r\n            InsertTodo[\"TodoDate\"] = \"\";\r\n        }\r\n        store.dispatch({ type: \"InsertTodo\", value: InsertTodo })\r\n    }\r\n    OnchangeUser = e => {\r\n        debugger;\r\n        if (e.target.name == \"UserName\") {\r\n            store.dispatch({ type: \"nameError\", value: false })\r\n        }\r\n        if (e.target.name == \"UserEmail\") {\r\n            store.dispatch({ type: \"EmailError\", value: false })\r\n        }\r\n        let InsertUser = this.props.UserTodo.InsertUser;\r\n        InsertUser[e.target.name] = e.target.value;\r\n        store.dispatch({ type: \"InsertUser\", value: InsertUser })\r\n    }\r\n    handleOk = e => {\r\n        debugger;\r\n        if (this.props.UserTodo.TabCheck === \"Todo\") {\r\n            this.InsertTodo();\r\n        }\r\n        else {\r\n            this.InsertUser();\r\n        }\r\n    };\r\n    InsertTodo = async (e) => {\r\n        debugger;\r\n        await store.dispatch({ type: \"Error\", value: false })\r\n        await store.dispatch({ type: \"ActionError\", value: false })\r\n        await store.dispatch({ type: \"DateError\", value: false })\r\n        let InsertTodo = this.props.UserTodo.InsertTodo;\r\n        if (InsertTodo.TodoAction == \"\") {\r\n            await store.dispatch({ type: \"Error\", value: true })\r\n            await store.dispatch({ type: \"ActionError\", value: true })\r\n        }\r\n        if (InsertTodo.TodoDate == \"\") {\r\n            await store.dispatch({ type: \"Error\", value: true })\r\n            await store.dispatch({ type: \"DateError\", value: true })\r\n        }\r\n        if (this.props.UserTodo.Error === true) {\r\n            return false;\r\n        }\r\n        let TodoList = this.props.UserTodo.TodoList;\r\n        let UpdateTodo;\r\n        if (this.props.UserTodo.Flag == \"U\") {\r\n            UpdateTodo = TodoList.filter(Todo => Todo.key == this.props.UserTodo.UserID)\r\n            if (UpdateTodo.length > 0) {\r\n                for (let i = 0; i < TodoList.length; i++) {\r\n                    if (TodoList[i].key == UpdateTodo[0].key) {\r\n                        TodoList[i].Action = InsertTodo.TodoAction;\r\n                        TodoList[i].DateAdded = InsertTodo.TodoDate;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            let UniqueID = (new Date().getTime()).toString(10);;\r\n            TodoList.push({ key: UniqueID, Action: InsertTodo.TodoAction, DateAdded: InsertTodo.TodoDate });\r\n        }\r\n        await store.dispatch({ type: \"Loading\", value: true })\r\n        debugger;\r\n        this.props.AddTodo(TodoList);\r\n        debugger;\r\n        this.props.HideVisible({ type: \"visible\", value: false });\r\n    }\r\n    InsertUser = async (e) => {\r\n        debugger;\r\n        await store.dispatch({ type: \"Error\", value: false })\r\n        await store.dispatch({ type: \"nameError\", value: false })\r\n        await store.dispatch({ type: \"EmailError\", value: false })\r\n        let InsertUser = this.props.UserTodo.InsertUser;\r\n        if (InsertUser.UserName == \"\") {\r\n            await store.dispatch({ type: \"Error\", value: true })\r\n            await store.dispatch({ type: \"nameError\", value: true })\r\n        }\r\n        if (InsertUser.UserEmail == \"\") {\r\n            await store.dispatch({ type: \"Error\", value: true })\r\n            await store.dispatch({ type: \"EmailError\", value: true })\r\n        }\r\n        const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        if (!re.test(InsertUser.UserEmail)) {\r\n            await store.dispatch({ type: \"Error\", value: true })\r\n            await store.dispatch({ type: \"EmailError\", value: true })\r\n        }\r\n        if (this.props.UserTodo.Error === true) {\r\n            return false;\r\n        }\r\n        let UserList = this.props.UserTodo.UserList;\r\n        let UpdateUser;\r\n        if (this.props.UserTodo.Flag == \"U\") {\r\n            UpdateUser = UserList.filter(User => User.key == this.props.UserTodo.UserID)\r\n            if (UpdateUser.length > 0) {\r\n                for (let i = 0; i < UserList.length; i++) {\r\n                    if (UserList[i].key == UpdateUser[0].key) {\r\n                        UserList[i].name = InsertUser.UserName;\r\n                        UserList[i].EmailID = InsertUser.UserEmail;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            let UniqueID = (new Date().getTime()).toString(10);;\r\n            UserList.push({ key: UniqueID, name: InsertUser.UserName, EmailID: InsertUser.UserEmail });\r\n        }\r\n\r\n        await store.dispatch({ type: \"Loading\", value: true })\r\n        this.props.AddUser(UserList);\r\n        this.props.HideVisible({ type: \"visible\", value: false });\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <h5>Todos Users</h5>\r\n                <Tabs defaultActiveKey={this.props.UserTodo.TabCheck}>\r\n                    <TabPane tab=\"Todos\" key=\"Todo\">\r\n                        <Button style={styles.Button} type=\"primary\" id=\"Todo\" onClick={this.showModal}>Add Todos</Button>\r\n                        <TodoDashboard props={this.state} />\r\n                    </TabPane>\r\n                    <TabPane tab=\"Users\" key=\"User\">\r\n                        <Button style={styles.Button} type=\"primary\" id=\"User\" onClick={this.showModal}>Add Users</Button>\r\n                        <UserDashboard {...this.state} />\r\n                    </TabPane>\r\n                </Tabs>\r\n                <ModelWindow\r\n                    handleOk={this.handleOk}\r\n                    handleCancel={this.handleCancel}\r\n                    OnchangeTodo={this.OnchangeTodo}\r\n                    OnchangeUser={this.OnchangeUser}\r\n                    OnchangeTodoDate={this.OnchangeTodoDate}\r\n                    props={this.state}\r\n                />\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\nconst styles = {\r\n    Button: {\r\n        borderRadius: '5px'\r\n    }\r\n}\r\nconst mapStatetoProps = state => {\r\n    return {\r\n        UserTodo: state.UserTodo\r\n    };\r\n}\r\nconst mapDispatchtoProps = dispatch => {\r\n    return {\r\n        AddTodo: (payload) => dispatch(ActionCreator.AddTodoDetails(payload)),\r\n        AddUser: (payload) => dispatch(ActionCreator.AddUserDetails(payload)),\r\n        HideVisible: (payload) => dispatch(ActionCreator.HideVisibleAction(payload)),\r\n        ClearField: () => dispatch(ActionCreator.ClearFieldStore()),\r\n    };\r\n}\r\nexport default connect(mapStatetoProps, mapDispatchtoProps)(Todos); \r\n","import React, { Component } from 'react';\r\n\r\nclass PageNotFound extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>PageNotFound</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PageNotFound;\r\n","import React, { Component } from 'react';\nimport { Route, Switch, BrowserRouter } from \"react-router-dom\";\nimport Todos from \"./UserTodos/UserTodos\";\nimport PageNotFound from \"./UserTodos/PageNotFound\";\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\"><Todos /></Route>\n          <Route path=\"/Todos\" ><Todos /></Route>\n          <Route ><PageNotFound /></Route>\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { store, Persistor } from './ReduxStore/Store';\nimport { Provider } from 'react-redux';\nimport Redux from \"redux-thunk\"\nimport { PersistGate } from 'redux-persist/integration/react';\n\nconst app = (<Provider store={store}>\n  <PersistGate persistor={Persistor}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </PersistGate>\n</Provider>);\n\nReactDOM.render(app, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}